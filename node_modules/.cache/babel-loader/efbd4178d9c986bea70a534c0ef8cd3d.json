{"ast":null,"code":"import _regeneratorRuntime from \"E:/React/weatherApp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"E:/React/weatherApp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"E:/React/weatherApp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _taggedTemplateLiteral from \"E:/React/weatherApp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nvar _jsxFileName = \"E:\\\\React\\\\weatherApp\\\\src\\\\App.js\",\n    _templateObject,\n    _templateObject2,\n    _templateObject3,\n    _templateObject4,\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nimport \"./styles.css\";\nimport styled from \"styled-components\";\nimport WeatherCard from \"./WeatherCard\";\nimport Input from \"./Input\";\nimport { getGeoLocation, getTemperature } from \"./api\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar WeatherMain = styled.div(_templateObject || (_templateObject = _taggedTemplateLiteral([\"\\n  display: flex;\\n  justify-content: center;\\n  align-items: center;\\n  height: 100%;\\n  margin: 10px;\\n\"])));\n_c = WeatherMain;\nvar Title = styled.h1(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral([\"\\n  font-family: \\\"Dancing Script\\\", cursive;\\n  position: absolute;\\n  top: 60px;\\n  font-weight: 800;\\n\"])));\n_c2 = Title;\nvar SearchInput = styled(Input)(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral([\"\\n  position: absolute;\\n  top: 160px;\\n\"])));\n_c3 = SearchInput;\nvar SearchButton = styled.button(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral([\"\\n  border: none;\\n  outline: none;\\n  cursor: pointer;\\n  font-weight: bold;\\n  height: 30px;\\n  background-color: #fae3e4;\\n  padding: 0 10px;\\n  letter-spacing: 2px;\\n\"])));\n_c4 = SearchButton;\nexport default function App() {\n  _s();\n\n  var _useState = useState(\"\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      inputText = _useState2[0],\n      setInputText = _useState2[1];\n\n  var _useState3 = useState(),\n      _useState4 = _slicedToArray(_useState3, 2),\n      long = _useState4[0],\n      setLong = _useState4[1];\n\n  var _useState5 = useState(),\n      _useState6 = _slicedToArray(_useState5, 2),\n      lat = _useState6[0],\n      setLat = _useState6[1];\n\n  var init = function init() {\n    // get long/lat of the current location\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(function (res) {\n        setLong(res.coords.longitude);\n        setLat(res.coords.latitude);\n      });\n    } else {\n      console.log(\"Geolocation is not supported by this browser.\");\n    }\n  };\n\n  useEffect(function () {\n    init();\n  }, []);\n\n  var onSearchButtonClick = function onSearchButtonClick() {\n    console.log(\"clicked!!!\", inputText); // getGeoLocation(inputText)\n    //   .then((res) => {\n    //     // get long, lat of the first searched result in the array\n    //     const [lat, long] = res.data.features[0].center;\n    //     console.log(\"lat\", lat);\n    //     console.log(\"long\", long);\n    //   })\n    //   .catch((e) => {\n    //     console.error(e);\n    //   });\n    // })\n\n    var getLocation = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var _yield$getGeoLocation, _yield$getGeoLocation2, err, res;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return getGeoLocation(inputText);\n\n              case 2:\n                _yield$getGeoLocation = _context.sent;\n                _yield$getGeoLocation2 = _slicedToArray(_yield$getGeoLocation, 2);\n                err = _yield$getGeoLocation2[0];\n                res = _yield$getGeoLocation2[1];\n                console.log(res);\n                console.log(err);\n\n              case 8:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function getLocation() {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    getLocation(); // const getTemp = async () => {\n    //   const res = await getTemperature(inputText);\n    //   console.log(res);\n    // };\n    // getTemp();\n  };\n\n  var Search = /*#__PURE__*/_jsxDEV(SearchButton, {\n    onClick: onSearchButtonClick,\n    children: \"Search\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 89,\n    columnNumber: 5\n  }, this);\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(WeatherMain, {\n      children: [/*#__PURE__*/_jsxDEV(Title, {\n        children: \"The Weather App\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(SearchInput, {\n        placeholder: \"Search a city...\",\n        value: inputText,\n        onChange: function onChange(e) {\n          setInputText(e.target.value);\n        },\n        suffix: Search\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(WeatherCard, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 93,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"eNkRgDs4N3E9cZuY3zyHQD8s59g=\");\n\n_c5 = App;\n\nvar _c, _c2, _c3, _c4, _c5;\n\n$RefreshReg$(_c, \"WeatherMain\");\n$RefreshReg$(_c2, \"Title\");\n$RefreshReg$(_c3, \"SearchInput\");\n$RefreshReg$(_c4, \"SearchButton\");\n$RefreshReg$(_c5, \"App\");","map":{"version":3,"sources":["E:/React/weatherApp/src/App.js"],"names":["useState","useEffect","styled","WeatherCard","Input","getGeoLocation","getTemperature","WeatherMain","div","Title","h1","SearchInput","SearchButton","button","App","inputText","setInputText","long","setLong","lat","setLat","init","navigator","geolocation","getCurrentPosition","res","coords","longitude","latitude","console","log","onSearchButtonClick","getLocation","err","Search","e","target","value"],"mappings":";;;;;;;;;;;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,OAAO,cAAP;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,SAASC,cAAT,EAAyBC,cAAzB,QAA+C,OAA/C;;AAEA,IAAMC,WAAW,GAAGL,MAAM,CAACM,GAAV,+KAAjB;KAAMD,W;AAQN,IAAME,KAAK,GAAGP,MAAM,CAACQ,EAAV,gLAAX;MAAMD,K;AAON,IAAME,WAAW,GAAGT,MAAM,CAACE,KAAD,CAAT,+GAAjB;MAAMO,W;AAKN,IAAMC,YAAY,GAAGV,MAAM,CAACW,MAAV,iPAAlB;MAAMD,Y;AAWN,eAAe,SAASE,GAAT,GAAe;AAAA;;AAAA,kBACMd,QAAQ,CAAC,EAAD,CADd;AAAA;AAAA,MACrBe,SADqB;AAAA,MACVC,YADU;;AAAA,mBAEJhB,QAAQ,EAFJ;AAAA;AAAA,MAErBiB,IAFqB;AAAA,MAEfC,OAFe;;AAAA,mBAGNlB,QAAQ,EAHF;AAAA;AAAA,MAGrBmB,GAHqB;AAAA,MAGhBC,MAHgB;;AAK5B,MAAMC,IAAI,GAAG,SAAPA,IAAO,GAAM;AACjB;AACA,QAAIC,SAAS,CAACC,WAAd,EAA2B;AACzBD,MAAAA,SAAS,CAACC,WAAV,CAAsBC,kBAAtB,CAAyC,UAACC,GAAD,EAAS;AAChDP,QAAAA,OAAO,CAACO,GAAG,CAACC,MAAJ,CAAWC,SAAZ,CAAP;AACAP,QAAAA,MAAM,CAACK,GAAG,CAACC,MAAJ,CAAWE,QAAZ,CAAN;AACD,OAHD;AAID,KALD,MAKO;AACLC,MAAAA,OAAO,CAACC,GAAR,CAAY,+CAAZ;AACD;AACF,GAVD;;AAYA7B,EAAAA,SAAS,CAAC,YAAM;AACdoB,IAAAA,IAAI;AACL,GAFQ,EAEN,EAFM,CAAT;;AAIA,MAAMU,mBAAmB,GAAG,SAAtBA,mBAAsB,GAAM;AAChCF,IAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0Bf,SAA1B,EADgC,CAEhC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,QAAMiB,WAAW;AAAA,0EAAG;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBACO3B,cAAc,CAACU,SAAD,CADrB;;AAAA;AAAA;AAAA;AACXkB,gBAAAA,GADW;AACNR,gBAAAA,GADM;AAElBI,gBAAAA,OAAO,CAACC,GAAR,CAAYL,GAAZ;AACAI,gBAAAA,OAAO,CAACC,GAAR,CAAYG,GAAZ;;AAHkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAH;;AAAA,sBAAXD,WAAW;AAAA;AAAA;AAAA,OAAjB;;AAMAA,IAAAA,WAAW,GAnBqB,CAoBhC;AACA;AACA;AACA;AAEA;AACD,GA1BD;;AA4BA,MAAME,MAAM,gBACV,QAAC,YAAD;AAAc,IAAA,OAAO,EAAEH,mBAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;;AAIA,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,2BACE,QAAC,WAAD;AAAA,8BACE,QAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE,QAAC,WAAD;AACE,QAAA,WAAW,EAAC,kBADd;AAEE,QAAA,KAAK,EAAEhB,SAFT;AAGE,QAAA,QAAQ,EAAE,kBAACoB,CAAD,EAAO;AACfnB,UAAAA,YAAY,CAACmB,CAAC,CAACC,MAAF,CAASC,KAAV,CAAZ;AACD,SALH;AAME,QAAA,MAAM,EAAEH;AANV;AAAA;AAAA;AAAA;AAAA,cAFF,eAUE,QAAC,WAAD;AAAA;AAAA;AAAA;AAAA,cAVF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAgBD;;GArEuBpB,G;;MAAAA,G","sourcesContent":["import { useState, useEffect } from \"react\";\nimport \"./styles.css\";\nimport styled from \"styled-components\";\nimport WeatherCard from \"./WeatherCard\";\nimport Input from \"./Input\";\nimport { getGeoLocation, getTemperature } from \"./api\";\n\nconst WeatherMain = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  height: 100%;\n  margin: 10px;\n`;\n\nconst Title = styled.h1`\n  font-family: \"Dancing Script\", cursive;\n  position: absolute;\n  top: 60px;\n  font-weight: 800;\n`;\n\nconst SearchInput = styled(Input)`\n  position: absolute;\n  top: 160px;\n`;\n\nconst SearchButton = styled.button`\n  border: none;\n  outline: none;\n  cursor: pointer;\n  font-weight: bold;\n  height: 30px;\n  background-color: #fae3e4;\n  padding: 0 10px;\n  letter-spacing: 2px;\n`;\n\nexport default function App() {\n  const [inputText, setInputText] = useState(\"\");\n  const [long, setLong] = useState();\n  const [lat, setLat] = useState();\n\n  const init = () => {\n    // get long/lat of the current location\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition((res) => {\n        setLong(res.coords.longitude);\n        setLat(res.coords.latitude);\n      });\n    } else {\n      console.log(\"Geolocation is not supported by this browser.\");\n    }\n  };\n\n  useEffect(() => {\n    init();\n  }, []);\n\n  const onSearchButtonClick = () => {\n    console.log(\"clicked!!!\", inputText);\n    // getGeoLocation(inputText)\n    //   .then((res) => {\n    //     // get long, lat of the first searched result in the array\n    //     const [lat, long] = res.data.features[0].center;\n    //     console.log(\"lat\", lat);\n    //     console.log(\"long\", long);\n    //   })\n    //   .catch((e) => {\n    //     console.error(e);\n    //   });\n    // })\n    const getLocation = async () => {\n      const [err, res] = await getGeoLocation(inputText);\n      console.log(res);\n      console.log(err);\n    };\n\n    getLocation();\n    // const getTemp = async () => {\n    //   const res = await getTemperature(inputText);\n    //   console.log(res);\n    // };\n\n    // getTemp();\n  };\n\n  const Search = (\n    <SearchButton onClick={onSearchButtonClick}>Search</SearchButton>\n  );\n\n  return (\n    <div className=\"App\">\n      <WeatherMain>\n        <Title>The Weather App</Title>\n        <SearchInput\n          placeholder=\"Search a city...\"\n          value={inputText}\n          onChange={(e) => {\n            setInputText(e.target.value);\n          }}\n          suffix={Search}\n        />\n        <WeatherCard />\n      </WeatherMain>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}